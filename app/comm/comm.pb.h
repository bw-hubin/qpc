/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.2 at Wed Sep 14 17:41:30 2022. */

#ifndef PB_COMM_PB_H_INCLUDED
#define PB_COMM_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _eECUType {
    eECUType_CPU = 0,
    eECUType_TBOX = 1,
    eECUType_BMS = 2,
    eECUType_VCU = 3,
    eECUType_BCM = 4,
    eECUType_ESP = 5,
    eECUType_BLE = 6
} eECUType;
#define _eECUType_MIN eECUType_CPU
#define _eECUType_MAX eECUType_BLE
#define _eECUType_ARRAYSIZE ((eECUType)(eECUType_BLE+1))

typedef enum _eSRCType {
    eSRCType_TSP = 0,
    eSRCType_APP = 1,
    eSRCType_FOTA = 2
} eSRCType;
#define _eSRCType_MIN eSRCType_TSP
#define _eSRCType_MAX eSRCType_FOTA
#define _eSRCType_ARRAYSIZE ((eSRCType)(eSRCType_FOTA+1))

typedef enum _eDATAType {
    eDATAType_CMD_PARAM = 1,
    eDATAType_FILE_INFO = 2,
    eDATAType_BLOCK_DATA = 3,
    eDATAType_ECHO = 4,
    eDATAType_MODEM_STAT = 5,
    eDATAType_MCU_STAT = 6,
    eDATAType_REAL_INFO = 7,
    eDATAType_CAN_FRAMES = 8,
    eDATAType_CAN_FILTER_CONFIG = 9,
    eDATAType_DT_SYS_MODE = 10,
    eDATAType_DT_VEH_LOGIN = 11
} eDATAType;
#define _eDATAType_MIN eDATAType_CMD_PARAM
#define _eDATAType_MAX eDATAType_DT_VEH_LOGIN
#define _eDATAType_ARRAYSIZE ((eDATAType)(eDATAType_DT_VEH_LOGIN+1))

typedef enum _eMSGType {
    eMSGType_CMD = 1,
    eMSGType_ACK = 2
} eMSGType;
#define _eMSGType_MIN eMSGType_CMD
#define _eMSGType_MAX eMSGType_ACK
#define _eMSGType_ARRAYSIZE ((eMSGType)(eMSGType_ACK+1))

typedef enum _eCMDEx {
    eCMDEx_COMM_HEART = 160,
    eCMDEx_CPU_STATUS = 161,
    eCMDEx_MCU_STATUS = 162,
    eCMDEx_OTA_FILEINFO = 177,
    eCMDEx_OTA_BLOCK = 178,
    eCMDEx_CAN_DATA = 193,
    eCMDEx_CAN_FILTERS_REQ = 194,
    eCMDEx_SYS_MODE = 225
} eCMDEx;
#define _eCMDEx_MIN eCMDEx_COMM_HEART
#define _eCMDEx_MAX eCMDEx_SYS_MODE
#define _eCMDEx_ARRAYSIZE ((eCMDEx)(eCMDEx_SYS_MODE+1))

typedef enum _eNW_Mode {
    eNW_Mode_NW_MODE_2G = 0,
    eNW_Mode_NW_MODE_3G = 1,
    eNW_Mode_NW_MODE_4G = 2
} eNW_Mode;
#define _eNW_Mode_MIN eNW_Mode_NW_MODE_2G
#define _eNW_Mode_MAX eNW_Mode_NW_MODE_4G
#define _eNW_Mode_ARRAYSIZE ((eNW_Mode)(eNW_Mode_NW_MODE_4G+1))

typedef enum _eNW_DevStat {
    eNW_DevStat_NW_STOP = 0,
    eNW_DevStat_NW_HANGUP = 1,
    eNW_DevStat_NW_NORMAL = 2
} eNW_DevStat;
#define _eNW_DevStat_MIN eNW_DevStat_NW_STOP
#define _eNW_DevStat_MAX eNW_DevStat_NW_NORMAL
#define _eNW_DevStat_ARRAYSIZE ((eNW_DevStat)(eNW_DevStat_NW_NORMAL+1))

typedef enum _eNW_NetStat {
    eNW_NetStat_NW_UNREGISTED = 0,
    eNW_NetStat_NW_REGISTED = 1
} eNW_NetStat;
#define _eNW_NetStat_MIN eNW_NetStat_NW_UNREGISTED
#define _eNW_NetStat_MAX eNW_NetStat_NW_REGISTED
#define _eNW_NetStat_ARRAYSIZE ((eNW_NetStat)(eNW_NetStat_NW_REGISTED+1))

typedef enum _eLPM_Stat {
    eLPM_Stat_LPM_SLEEP = 0,
    eLPM_Stat_LPM_WAKEUP = 1
} eLPM_Stat;
#define _eLPM_Stat_MIN eLPM_Stat_LPM_SLEEP
#define _eLPM_Stat_MAX eLPM_Stat_LPM_WAKEUP
#define _eLPM_Stat_ARRAYSIZE ((eLPM_Stat)(eLPM_Stat_LPM_WAKEUP+1))

typedef enum _ePWRMODE {
    ePWRMODE_PWR_NORMAL = 1,
    ePWRMODE_PWR_BATTERY = 2
} ePWRMODE;
#define _ePWRMODE_MIN ePWRMODE_PWR_NORMAL
#define _ePWRMODE_MAX ePWRMODE_PWR_BATTERY
#define _ePWRMODE_ARRAYSIZE ((ePWRMODE)(ePWRMODE_PWR_BATTERY+1))

typedef enum _eOTA_Stat {
    eOTA_Stat_OTA_BUSY = 1,
    eOTA_Stat_OTA_IDLE = 2
} eOTA_Stat;
#define _eOTA_Stat_MIN eOTA_Stat_OTA_BUSY
#define _eOTA_Stat_MAX eOTA_Stat_OTA_IDLE
#define _eOTA_Stat_ARRAYSIZE ((eOTA_Stat)(eOTA_Stat_OTA_IDLE+1))

typedef enum _eVK_TSP_CMD {
    eVK_TSP_CMD_SET_PK = 1,
    eVK_TSP_CMD_SET_BL = 2,
    eVK_TSP_CMD_SET_PIN = 3
} eVK_TSP_CMD;
#define _eVK_TSP_CMD_MIN eVK_TSP_CMD_SET_PK
#define _eVK_TSP_CMD_MAX eVK_TSP_CMD_SET_PIN
#define _eVK_TSP_CMD_ARRAYSIZE ((eVK_TSP_CMD)(eVK_TSP_CMD_SET_PIN+1))

typedef enum _eVK_PEPS_STATUS {
    eVK_PEPS_STATUS_DISCONNECTED = 0,
    eVK_PEPS_STATUS_PE = 1,
    eVK_PEPS_STATUS_PS = 2,
    eVK_PEPS_STATUS_PEPS = 3,
    eVK_PEPS_STATUS_FAR_DOOR = 4,
    eVK_PEPS_STATUS_UNKNOW = 5
} eVK_PEPS_STATUS;
#define _eVK_PEPS_STATUS_MIN eVK_PEPS_STATUS_DISCONNECTED
#define _eVK_PEPS_STATUS_MAX eVK_PEPS_STATUS_UNKNOW
#define _eVK_PEPS_STATUS_ARRAYSIZE ((eVK_PEPS_STATUS)(eVK_PEPS_STATUS_UNKNOW+1))

typedef enum _eVK_CAR_CONTROL_CMD {
    eVK_CAR_CONTROL_CMD_DOOR_OPEN = 1,
    eVK_CAR_CONTROL_CMD_DOOR_CLOSE = 2,
    eVK_CAR_CONTROL_CMD_ENGINE_OPEN = 3,
    eVK_CAR_CONTROL_CMD_ENGINE_CLOSE = 4,
    eVK_CAR_CONTROL_CMD_WHISTLE_LIGHT = 5,
    eVK_CAR_CONTROL_CMD_WINDOW_OPEN = 6,
    eVK_CAR_CONTROL_CMD_WINDOW_CLOSE = 7,
    eVK_CAR_CONTROL_CMD_SUMROOF_OPEN = 8,
    eVK_CAR_CONTROL_CMD_SUMROOF_CLOSE = 9,
    eVK_CAR_CONTROL_CMD_TRUNK_OPEN = 10,
    eVK_CAR_CONTROL_CMD_TRUNK_CLOSE = 11,
    eVK_CAR_CONTROL_CMD_DOMAIN_PEPS = 12,
    eVK_CAR_CONTROL_CMD_SET_PS = 13,
    eVK_CAR_CONTROL_CMD_SET_PEPS = 14,
    eVK_CAR_CONTROL_CMD_SET_PE = 15,
    eVK_CAR_CONTROL_CMD_SET_PINCODE = 16,
    eVK_CAR_CONTROL_CMD_SET_PINON = 17,
    eVK_CAR_CONTROL_CMD_SET_PINOFF = 18,
    eVK_CAR_CONTROL_CMD_CAR_DISCONNECT = 19
} eVK_CAR_CONTROL_CMD;
#define _eVK_CAR_CONTROL_CMD_MIN eVK_CAR_CONTROL_CMD_DOOR_OPEN
#define _eVK_CAR_CONTROL_CMD_MAX eVK_CAR_CONTROL_CMD_CAR_DISCONNECT
#define _eVK_CAR_CONTROL_CMD_ARRAYSIZE ((eVK_CAR_CONTROL_CMD)(eVK_CAR_CONTROL_CMD_CAR_DISCONNECT+1))

typedef enum _eVK_CAR_CONTROL_RET {
    eVK_CAR_CONTROL_RET_FAILED = 0,
    eVK_CAR_CONTROL_RET_SUCCESS = 1,
    eVK_CAR_CONTROL_RET_TMOUT = 2,
    eVK_CAR_CONTROL_RET_SLEEP_DISCONNECT = 21,
    eVK_CAR_CONTROL_RET_CERT_TMOUT_DISCONNECT = 22,
    eVK_CAR_CONTROL_RET_BAD_LINK_STOP_ADV = 23,
    eVK_CAR_CONTROL_RET_CMD_RESPONSE_TMOUT = 255
} eVK_CAR_CONTROL_RET;
#define _eVK_CAR_CONTROL_RET_MIN eVK_CAR_CONTROL_RET_FAILED
#define _eVK_CAR_CONTROL_RET_MAX eVK_CAR_CONTROL_RET_CMD_RESPONSE_TMOUT
#define _eVK_CAR_CONTROL_RET_ARRAYSIZE ((eVK_CAR_CONTROL_RET)(eVK_CAR_CONTROL_RET_CMD_RESPONSE_TMOUT+1))

typedef enum _eEvtType {
    eEvtType_EVT_DEFAULT = 0,
    eEvtType_EVT_TIM = 1,
    eEvtType_EVT_CALL = 2,
    eEvtType_EVT_KEY = 3,
    eEvtType_EVT_CHG = 4,
    eEvtType_EVT_PLUG = 5,
    eEvtType_EVT_DIAG = 6,
    eEvtType_EVT_60H = 7,
    eEvtType_EVT_1H = 8,
    eEvtType_EVT_12V = 9,
    eEvtType_EVT_AUTO = 11,
    eEvtType_EVT_SUMM = 12,
    eEvtType_EVT_RCCALL = 20,
    eEvtType_EVT_RCCOND = 21,
    eEvtType_EVT_RCCHG = 22,
    eEvtType_EVT_RCCHGORD = 23,
    eEvtType_EVT_RCTHR = 24,
    eEvtType_EVT_OTAUPD = 50,
    eEvtType_EVT_OTAFLH = 51,
    eEvtType_EVT_RCACK = 60
} eEvtType;
#define _eEvtType_MIN eEvtType_EVT_DEFAULT
#define _eEvtType_MAX eEvtType_EVT_RCACK
#define _eEvtType_ARRAYSIZE ((eEvtType)(eEvtType_EVT_RCACK+1))

typedef enum _eIVI_Type {
    eIVI_Type_IVI_XCALL = 1,
    eIVI_Type_IVI_UPGRADE = 2,
    eIVI_Type_IVI_ECU_UPD = 3
} eIVI_Type;
#define _eIVI_Type_MIN eIVI_Type_IVI_XCALL
#define _eIVI_Type_MAX eIVI_Type_IVI_ECU_UPD
#define _eIVI_Type_ARRAYSIZE ((eIVI_Type)(eIVI_Type_IVI_ECU_UPD+1))

typedef enum _eX_CALL_Type {
    eX_CALL_Type_I_CALL = 1,
    eX_CALL_Type_B_CALL = 2,
    eX_CALL_Type_E_CALL = 3
} eX_CALL_Type;
#define _eX_CALL_Type_MIN eX_CALL_Type_I_CALL
#define _eX_CALL_Type_MAX eX_CALL_Type_E_CALL
#define _eX_CALL_Type_ARRAYSIZE ((eX_CALL_Type)(eX_CALL_Type_E_CALL+1))

typedef enum _eX_CALL_Status {
    eX_CALL_Status_X_CALL_START = 0,
    eX_CALL_Status_X_CALL_INCOMING = 1,
    eX_CALL_Status_X_CALL_FAILED_RE = 2,
    eX_CALL_Status_X_CALL_FAILED = 3,
    eX_CALL_Status_X_CALL_CONNECTING = 4,
    eX_CALL_Status_X_CALL_CONNECTED = 5,
    eX_CALL_Status_X_CALL_DATA_SENDING = 6,
    eX_CALL_Status_X_CALL_ENDED = 7,
    eX_CALL_Status_X_CALL_NO = 8
} eX_CALL_Status;
#define _eX_CALL_Status_MIN eX_CALL_Status_X_CALL_START
#define _eX_CALL_Status_MAX eX_CALL_Status_X_CALL_NO
#define _eX_CALL_Status_ARRAYSIZE ((eX_CALL_Status)(eX_CALL_Status_X_CALL_NO+1))

typedef enum _eIVI_Command {
    eIVI_Command_IVI_CORRECT_RES = 0,
    eIVI_Command_IVI_FAULT_RES = 1
} eIVI_Command;
#define _eIVI_Command_MIN eIVI_Command_IVI_CORRECT_RES
#define _eIVI_Command_MAX eIVI_Command_IVI_FAULT_RES
#define _eIVI_Command_ARRAYSIZE ((eIVI_Command)(eIVI_Command_IVI_FAULT_RES+1))

/* Struct definitions */
typedef struct _DATA_CAN_Filter {
    pb_callback_t ids;
/* @@protoc_insertion_point(struct:DATA_CAN_Filter) */
} DATA_CAN_Filter;

typedef PB_BYTES_ARRAY_T(8) CAN_FRAME_data_t;
typedef struct _CAN_FRAME {
    uint32_t id;
    CAN_FRAME_data_t data;
/* @@protoc_insertion_point(struct:CAN_FRAME) */
} CAN_FRAME;

typedef PB_BYTES_ARRAY_T(256) DATA_Block_data_t;
typedef struct _DATA_Block {
    uint32_t block_amount;
    uint32_t block_id;
    DATA_Block_data_t data;
    uint32_t checksum;
/* @@protoc_insertion_point(struct:DATA_Block) */
} DATA_Block;

typedef PB_BYTES_ARRAY_T(900) DATA_CANData_data_t;
typedef struct _DATA_CANData {
    bool has_data;
    DATA_CANData_data_t data;
/* @@protoc_insertion_point(struct:DATA_CANData) */
} DATA_CANData;

typedef PB_BYTES_ARRAY_T(512) DATA_CmdParam_data_t;
typedef struct _DATA_CmdParam {
    bool has_data;
    DATA_CmdParam_data_t data;
/* @@protoc_insertion_point(struct:DATA_CmdParam) */
} DATA_CmdParam;

typedef struct _DATA_Echo {
    bool has_errcode;
    uint32_t errcode;
    bool has_block_id;
    uint32_t block_id;
/* @@protoc_insertion_point(struct:DATA_Echo) */
} DATA_Echo;

typedef struct _DATA_FileInfo {
    char file_name[50];
    uint32_t file_size;
    uint32_t block_size;
    char version_hw[20];
    char version_sw[50];
    uint32_t encrype;
/* @@protoc_insertion_point(struct:DATA_FileInfo) */
} DATA_FileInfo;

typedef struct _DATA_MCUInfo {
    bool has_power_mode;
    ePWRMODE power_mode;
    bool has_battery_cap;
    uint32_t battery_cap;
    bool has_sleep_ctrl;
    uint32_t sleep_ctrl;
    bool has_sleep_ctrl_force;
    uint32_t sleep_ctrl_force;
    bool has_version;
    char version[20];
    bool has_sn;
    char sn[20];
/* @@protoc_insertion_point(struct:DATA_MCUInfo) */
} DATA_MCUInfo;

typedef struct _DATA_NWStat {
    eNW_Mode eMode;
    uint32_t csq;
    uint32_t anteStat;
    eNW_DevStat eDevStat;
    eNW_NetStat eNetStat;
    bool has_diagRet;
    uint32_t diagRet;
/* @@protoc_insertion_point(struct:DATA_NWStat) */
} DATA_NWStat;

typedef PB_BYTES_ARRAY_T(1200) DATA_RealInfo_data_t;
typedef struct _DATA_RealInfo {
    uint32_t warning;
    uint32_t upl;
    DATA_RealInfo_data_t data;
/* @@protoc_insertion_point(struct:DATA_RealInfo) */
} DATA_RealInfo;

typedef struct _DATA_SysMode {
    bool gb_mode;
/* @@protoc_insertion_point(struct:DATA_SysMode) */
} DATA_SysMode;

typedef struct _DATA_VehLogin {
    char vin[18];
    char tin[10];
    uint32_t batteryPackNum;
    uint32_t batteryPackCodeLen;
    char batteryPackCodes[1000];
    bool has_vehModel;
    uint32_t vehModel;
    bool has_swVer;
    uint32_t swVer;
/* @@protoc_insertion_point(struct:DATA_VehLogin) */
} DATA_VehLogin;

typedef struct _ECU_UPGRADE_STATUS {
    eECUType id;
    eOTA_Stat ota_state;
    bool has_progress;
    uint32_t progress;
    bool has_do_upgrade;
    bool do_upgrade;
/* @@protoc_insertion_point(struct:ECU_UPGRADE_STATUS) */
} ECU_UPGRADE_STATUS;

typedef struct _TICK {
    uint32_t year;
    uint32_t month;
    uint32_t day;
    uint32_t hour;
    uint32_t min;
    uint32_t sec;
    uint32_t msec;
/* @@protoc_insertion_point(struct:TICK) */
} TICK;

typedef struct _DATA_CANFrames {
    TICK tick;
    pb_callback_t frames;
/* @@protoc_insertion_point(struct:DATA_CANFrames) */
} DATA_CANFrames;

typedef struct _DATA_GPSInfo {
    uint32_t valid;
    uint32_t longitude;
    uint32_t latitude;
    uint32_t speed;
    uint32_t angle;
    TICK tick;
/* @@protoc_insertion_point(struct:DATA_GPSInfo) */
} DATA_GPSInfo;

typedef struct _OTA_File_fullinfo {
    DATA_FileInfo headinfo;
    pb_callback_t blocks;
/* @@protoc_insertion_point(struct:OTA_File_fullinfo) */
} OTA_File_fullinfo;

typedef struct _OTA_MetaInfo {
    bool has_mcu_metainfo;
    DATA_FileInfo mcu_metainfo;
    bool has_firm_metainfo;
    DATA_FileInfo firm_metainfo;
    bool has_cpu_metainfo;
    DATA_FileInfo cpu_metainfo;
    bool has_ble_metainfo;
    DATA_FileInfo ble_metainfo;
/* @@protoc_insertion_point(struct:OTA_MetaInfo) */
} OTA_MetaInfo;

typedef struct _DATA_ModemInfo {
    bool has_eMode;
    eNW_Mode eMode;
    bool has_csq;
    uint32_t csq;
    bool has_anteStat;
    uint32_t anteStat;
    bool has_eDevStat;
    eNW_DevStat eDevStat;
    bool has_eNetStat;
    eNW_NetStat eNetStat;
    bool has_diagRet;
    uint32_t diagRet;
    bool has_gps_info;
    DATA_GPSInfo gps_info;
    bool has_eLPMStat;
    eLPM_Stat eLPMStat;
    bool has_eOTAStat;
    eOTA_Stat eOTAStat;
    bool has_iccid;
    char iccid[30];
    bool has_version;
    char version[20];
/* @@protoc_insertion_point(struct:DATA_ModemInfo) */
} DATA_ModemInfo;

typedef struct _COMM_Msg {
    uint32_t session_id;
    uint32_t msg_id;
    uint32_t ack_flag;
    eECUType target;
    pb_size_t which_data;
    union {
        DATA_CmdParam cmd_param;
        DATA_FileInfo file_info;
        DATA_Block block;
        DATA_Echo echo;
        DATA_ModemInfo modem_info;
        DATA_MCUInfo mcu_info;
        DATA_RealInfo real_info;
        DATA_CANData can_data;
        DATA_CAN_Filter can_filters;
        DATA_SysMode sys_mode;
        DATA_VehLogin veh_login;
    } data;
    bool has_src;
    eSRCType src;
/* @@protoc_insertion_point(struct:COMM_Msg) */
} COMM_Msg;

/* Default values for struct fields */

/* Initializer values for message structs */
#define DATA_CmdParam_init_default               {false, {0, {0}}}
#define DATA_FileInfo_init_default               {"", 0, 0, "", "", 0}
#define DATA_Block_init_default                  {0, 0, {0, {0}}, 0}
#define DATA_Echo_init_default                   {false, 0, false, 0}
#define DATA_CAN_Filter_init_default             {{{NULL}, NULL}}
#define DATA_NWStat_init_default                 {_eNW_Mode_MIN, 0, 0, _eNW_DevStat_MIN, _eNW_NetStat_MIN, false, 0}
#define TICK_init_default                        {0, 0, 0, 0, 0, 0, 0}
#define CAN_FRAME_init_default                   {0, {0, {0}}}
#define DATA_CANFrames_init_default              {TICK_init_default, {{NULL}, NULL}}
#define DATA_CANData_init_default                {false, {0, {0}}}
#define DATA_GPSInfo_init_default                {0, 0, 0, 0, 0, TICK_init_default}
#define DATA_ModemInfo_init_default              {false, _eNW_Mode_MIN, false, 0, false, 0, false, _eNW_DevStat_MIN, false, _eNW_NetStat_MIN, false, 0, false, DATA_GPSInfo_init_default, false, _eLPM_Stat_MIN, false, _eOTA_Stat_MIN, false, "", false, ""}
#define DATA_MCUInfo_init_default                {false, _ePWRMODE_MIN, false, 0, false, 0, false, 0, false, "", false, ""}
#define DATA_RealInfo_init_default               {0, 0, {0, {0}}}
#define DATA_SysMode_init_default                {0}
#define DATA_VehLogin_init_default               {"", "", 0, 0, "", false, 0, false, 0}
#define ECU_UPGRADE_STATUS_init_default          {_eECUType_MIN, _eOTA_Stat_MIN, false, 0, false, 0}
#define COMM_Msg_init_default                    {0, 0, 0, _eECUType_MIN, 0, {DATA_CmdParam_init_default}, false, _eSRCType_MIN}
#define OTA_File_fullinfo_init_default           {DATA_FileInfo_init_default, {{NULL}, NULL}}
#define OTA_MetaInfo_init_default                {false, DATA_FileInfo_init_default, false, DATA_FileInfo_init_default, false, DATA_FileInfo_init_default, false, DATA_FileInfo_init_default}
#define DATA_CmdParam_init_zero                  {false, {0, {0}}}
#define DATA_FileInfo_init_zero                  {"", 0, 0, "", "", 0}
#define DATA_Block_init_zero                     {0, 0, {0, {0}}, 0}
#define DATA_Echo_init_zero                      {false, 0, false, 0}
#define DATA_CAN_Filter_init_zero                {{{NULL}, NULL}}
#define DATA_NWStat_init_zero                    {_eNW_Mode_MIN, 0, 0, _eNW_DevStat_MIN, _eNW_NetStat_MIN, false, 0}
#define TICK_init_zero                           {0, 0, 0, 0, 0, 0, 0}
#define CAN_FRAME_init_zero                      {0, {0, {0}}}
#define DATA_CANFrames_init_zero                 {TICK_init_zero, {{NULL}, NULL}}
#define DATA_CANData_init_zero                   {false, {0, {0}}}
#define DATA_GPSInfo_init_zero                   {0, 0, 0, 0, 0, TICK_init_zero}
#define DATA_ModemInfo_init_zero                 {false, _eNW_Mode_MIN, false, 0, false, 0, false, _eNW_DevStat_MIN, false, _eNW_NetStat_MIN, false, 0, false, DATA_GPSInfo_init_zero, false, _eLPM_Stat_MIN, false, _eOTA_Stat_MIN, false, "", false, ""}
#define DATA_MCUInfo_init_zero                   {false, _ePWRMODE_MIN, false, 0, false, 0, false, 0, false, "", false, ""}
#define DATA_RealInfo_init_zero                  {0, 0, {0, {0}}}
#define DATA_SysMode_init_zero                   {0}
#define DATA_VehLogin_init_zero                  {"", "", 0, 0, "", false, 0, false, 0}
#define ECU_UPGRADE_STATUS_init_zero             {_eECUType_MIN, _eOTA_Stat_MIN, false, 0, false, 0}
#define COMM_Msg_init_zero                       {0, 0, 0, _eECUType_MIN, 0, {DATA_CmdParam_init_zero}, false, _eSRCType_MIN}
#define OTA_File_fullinfo_init_zero              {DATA_FileInfo_init_zero, {{NULL}, NULL}}
#define OTA_MetaInfo_init_zero                   {false, DATA_FileInfo_init_zero, false, DATA_FileInfo_init_zero, false, DATA_FileInfo_init_zero, false, DATA_FileInfo_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define DATA_CAN_Filter_ids_tag                  1
#define CAN_FRAME_id_tag                         1
#define CAN_FRAME_data_tag                       2
#define DATA_Block_block_amount_tag              1
#define DATA_Block_block_id_tag                  2
#define DATA_Block_data_tag                      3
#define DATA_Block_checksum_tag                  4
#define DATA_CANData_data_tag                    1
#define DATA_CmdParam_data_tag                   1
#define DATA_Echo_errcode_tag                    1
#define DATA_Echo_block_id_tag                   2
#define DATA_FileInfo_file_name_tag              1
#define DATA_FileInfo_file_size_tag              2
#define DATA_FileInfo_block_size_tag             3
#define DATA_FileInfo_version_hw_tag             4
#define DATA_FileInfo_version_sw_tag             5
#define DATA_FileInfo_encrype_tag                6
#define DATA_MCUInfo_power_mode_tag              1
#define DATA_MCUInfo_battery_cap_tag             2
#define DATA_MCUInfo_sleep_ctrl_tag              3
#define DATA_MCUInfo_sleep_ctrl_force_tag        4
#define DATA_MCUInfo_version_tag                 5
#define DATA_MCUInfo_sn_tag                      6
#define DATA_NWStat_eMode_tag                    1
#define DATA_NWStat_csq_tag                      2
#define DATA_NWStat_anteStat_tag                 3
#define DATA_NWStat_eDevStat_tag                 4
#define DATA_NWStat_eNetStat_tag                 5
#define DATA_NWStat_diagRet_tag                  6
#define DATA_RealInfo_warning_tag                1
#define DATA_RealInfo_upl_tag                    2
#define DATA_RealInfo_data_tag                   3
#define DATA_SysMode_gb_mode_tag                 1
#define DATA_VehLogin_vin_tag                    1
#define DATA_VehLogin_tin_tag                    2
#define DATA_VehLogin_batteryPackNum_tag         3
#define DATA_VehLogin_batteryPackCodeLen_tag     4
#define DATA_VehLogin_batteryPackCodes_tag       5
#define DATA_VehLogin_vehModel_tag               6
#define DATA_VehLogin_swVer_tag                  7
#define ECU_UPGRADE_STATUS_id_tag                1
#define ECU_UPGRADE_STATUS_ota_state_tag         2
#define ECU_UPGRADE_STATUS_progress_tag          3
#define ECU_UPGRADE_STATUS_do_upgrade_tag        4
#define TICK_year_tag                            1
#define TICK_month_tag                           2
#define TICK_day_tag                             3
#define TICK_hour_tag                            4
#define TICK_min_tag                             5
#define TICK_sec_tag                             6
#define TICK_msec_tag                            7
#define DATA_CANFrames_tick_tag                  1
#define DATA_CANFrames_frames_tag                2
#define DATA_GPSInfo_valid_tag                   1
#define DATA_GPSInfo_longitude_tag               2
#define DATA_GPSInfo_latitude_tag                3
#define DATA_GPSInfo_speed_tag                   4
#define DATA_GPSInfo_angle_tag                   5
#define DATA_GPSInfo_tick_tag                    6
#define OTA_File_fullinfo_headinfo_tag           1
#define OTA_File_fullinfo_blocks_tag             2
#define OTA_MetaInfo_mcu_metainfo_tag            1
#define OTA_MetaInfo_firm_metainfo_tag           2
#define OTA_MetaInfo_cpu_metainfo_tag            3
#define OTA_MetaInfo_ble_metainfo_tag            4
#define DATA_ModemInfo_eMode_tag                 1
#define DATA_ModemInfo_csq_tag                   2
#define DATA_ModemInfo_anteStat_tag              3
#define DATA_ModemInfo_eDevStat_tag              4
#define DATA_ModemInfo_eNetStat_tag              5
#define DATA_ModemInfo_diagRet_tag               6
#define DATA_ModemInfo_gps_info_tag              7
#define DATA_ModemInfo_eLPMStat_tag              8
#define DATA_ModemInfo_eOTAStat_tag              9
#define DATA_ModemInfo_iccid_tag                 10
#define DATA_ModemInfo_version_tag               11
#define COMM_Msg_cmd_param_tag                   5
#define COMM_Msg_file_info_tag                   6
#define COMM_Msg_block_tag                       7
#define COMM_Msg_echo_tag                        8
#define COMM_Msg_modem_info_tag                  9
#define COMM_Msg_mcu_info_tag                    10
#define COMM_Msg_real_info_tag                   11
#define COMM_Msg_can_data_tag                    12
#define COMM_Msg_can_filters_tag                 13
#define COMM_Msg_sys_mode_tag                    14
#define COMM_Msg_veh_login_tag                   15
#define COMM_Msg_session_id_tag                  1
#define COMM_Msg_msg_id_tag                      2
#define COMM_Msg_ack_flag_tag                    3
#define COMM_Msg_target_tag                      4
#define COMM_Msg_src_tag                         16

/* Struct field encoding specification for nanopb */
extern const pb_field_t DATA_CmdParam_fields[2];
extern const pb_field_t DATA_FileInfo_fields[7];
extern const pb_field_t DATA_Block_fields[5];
extern const pb_field_t DATA_Echo_fields[3];
extern const pb_field_t DATA_CAN_Filter_fields[2];
extern const pb_field_t DATA_NWStat_fields[7];
extern const pb_field_t TICK_fields[8];
extern const pb_field_t CAN_FRAME_fields[3];
extern const pb_field_t DATA_CANFrames_fields[3];
extern const pb_field_t DATA_CANData_fields[2];
extern const pb_field_t DATA_GPSInfo_fields[7];
extern const pb_field_t DATA_ModemInfo_fields[12];
extern const pb_field_t DATA_MCUInfo_fields[7];
extern const pb_field_t DATA_RealInfo_fields[4];
extern const pb_field_t DATA_SysMode_fields[2];
extern const pb_field_t DATA_VehLogin_fields[8];
extern const pb_field_t ECU_UPGRADE_STATUS_fields[5];
extern const pb_field_t COMM_Msg_fields[17];
extern const pb_field_t OTA_File_fullinfo_fields[3];
extern const pb_field_t OTA_MetaInfo_fields[5];

/* Maximum encoded size of messages (where known) */
#define DATA_CmdParam_size                       515
#define DATA_FileInfo_size                       144
#define DATA_Block_size                          277
#define DATA_Echo_size                           12
/* DATA_CAN_Filter_size depends on runtime parameters */
#define DATA_NWStat_size                         24
#define TICK_size                                42
#define CAN_FRAME_size                           16
/* DATA_CANFrames_size depends on runtime parameters */
#define DATA_CANData_size                        903
#define DATA_GPSInfo_size                        74
#define DATA_ModemInfo_size                      158
#define DATA_MCUInfo_size                        64
#define DATA_RealInfo_size                       1215
#define DATA_SysMode_size                        2
#define DATA_VehLogin_size                       1059
#define ECU_UPGRADE_STATUS_size                  12
/* COMM_Msg_size depends on runtime parameters */
/* OTA_File_fullinfo_size depends on runtime parameters */
#define OTA_MetaInfo_size                        588

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
